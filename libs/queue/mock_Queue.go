// Code generated by mockery v2.45.0. DO NOT EDIT.

package queue

import mock "github.com/stretchr/testify/mock"

// MockQueue is an autogenerated mock type for the Queue type
type MockQueue struct {
	mock.Mock
}

type MockQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueue) EXPECT() *MockQueue_Expecter {
	return &MockQueue_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockQueue) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueue_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockQueue_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockQueue_Expecter) Close() *MockQueue_Close_Call {
	return &MockQueue_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockQueue_Close_Call) Run(run func()) *MockQueue_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueue_Close_Call) Return(_a0 error) *MockQueue_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueue_Close_Call) RunAndReturn(run func() error) *MockQueue_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Consume provides a mock function with given fields: name, handler
func (_m *MockQueue) Consume(name string, handler ConsumeFn) error {
	ret := _m.Called(name, handler)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ConsumeFn) error); ok {
		r0 = rf(name, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueue_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type MockQueue_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//   - name string
//   - handler ConsumeFn
func (_e *MockQueue_Expecter) Consume(name interface{}, handler interface{}) *MockQueue_Consume_Call {
	return &MockQueue_Consume_Call{Call: _e.mock.On("Consume", name, handler)}
}

func (_c *MockQueue_Consume_Call) Run(run func(name string, handler ConsumeFn)) *MockQueue_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ConsumeFn))
	})
	return _c
}

func (_c *MockQueue_Consume_Call) Return(_a0 error) *MockQueue_Consume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueue_Consume_Call) RunAndReturn(run func(string, ConsumeFn) error) *MockQueue_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: queue, message
func (_m *MockQueue) Publish(queue string, message Message) error {
	ret := _m.Called(queue, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, Message) error); ok {
		r0 = rf(queue, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueue_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockQueue_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - queue string
//   - message Message
func (_e *MockQueue_Expecter) Publish(queue interface{}, message interface{}) *MockQueue_Publish_Call {
	return &MockQueue_Publish_Call{Call: _e.mock.On("Publish", queue, message)}
}

func (_c *MockQueue_Publish_Call) Run(run func(queue string, message Message)) *MockQueue_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(Message))
	})
	return _c
}

func (_c *MockQueue_Publish_Call) Return(_a0 error) *MockQueue_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueue_Publish_Call) RunAndReturn(run func(string, Message) error) *MockQueue_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueue creates a new instance of MockQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueue {
	mock := &MockQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
